#!/usr/bin/env python

import argparse
import subprocess

def sys_call(command):
    '''Execute a shell command'''
    process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
    stdout, stderr = process.communicate()

    return (
        stdout.decode('utf-8').rstrip(),
        stderr.decode('utf-8').rstrip(),
        process.wait()
    )

def docker_exec(args, extras):
    '''Execute a command in a docker container'''
    stdout, stderr, result = sys_call("docker exec " + args.container + " " + " ".join(args.command + extras))
    print(stdout)
    print(stderr)
    print(result)

def json_rpc(args, extras):
    '''Execute a JSON-RPC command'''
    stdout, stderr, result = sys_call("docker exec bitcoin bitcoin-cli -conf=/etc/bitcoin.conf -datadir=/var/lib/bitcoind " + " ".join(args.command + extras))
    print(stdout)
    print(stderr)
    print(result)

parser = argparse.ArgumentParser()
parser.add_argument('--version', action='version', version='%(prog)s 1.0')
parser.set_defaults(func=lambda x, y: parser.print_usage())

subparser = parser.add_subparsers(title='available commands')

parser_exec = subparser.add_parser('exec', help='execute a command in a docker container')
parser_exec.add_argument('container', help='the container to execute the command in')
parser_exec.add_argument('command', help='the command to execute', nargs=argparse.REMAINDER)
parser_exec.set_defaults(func=docker_exec)

parser_rpc = subparser.add_parser('rpc', help='execute a JSON-RPC command')
parser_rpc.add_argument('command', help='the RPC command to execute', nargs=argparse.REMAINDER)
parser_rpc.set_defaults(func=json_rpc)

output_group = parser.add_mutually_exclusive_group()
output_group.add_argument('-q', '--quiet', action='store_true', help='suppress all command output')
output_group.add_argument('-v', '--verbose', dest='verbosity', default=0, action='count', help='increase output verbosity')

(args, extras) = parser.parse_known_args()
args.func(args, extras)
