#!/bin/sh

# Environment
COMMAND=$1
SCRIPT=$0
OS=$(uname -s)
PLATFORM=$(uname -m)

# Options
QUIET=false

# Output colors
COLOR_INFO='\033[0;32m'
COLOR_ERROR='\033[0;31m'
COLOR_WARN='\033[0;33m'
COLOR_NONE='\033[0m'

#
# Write to the console
#
console() {
  color=$COLOR_NONE;

  case "$1" in
    warn)
      color=$COLOR_WARN;
      shift
      ;;
    error)
      color=$COLOR_ERROR;
      shift
      ;;
    info)
      color=$COLOR_INFO;
      shift
      ;;
  esac

  echo "${color}${@}" > $OUTPUT
}

#
# Print a message and exit
#
die() {
  console error $1 && exit ${2:-1}
}

#
# Execute a shell command
#
execute() {
    OUTPUT=$("${@}" 2>&1)
    RC=$?

    if [ $QUIET = false ]; then
        echo "$OUTPUT"
    fi
    
    exit $RC
}

#
# Print program help text
#
help() {
  help=$(cat << EOF
    Usage: $SCRIPT [-q] COMMAND [ARGS...]
    available commands:
      rpc                 Execute a JSON-RPC command
      exec                Execute a shell command in a container
    optional arguments:
      -h, --help          Show this help message and exit
      -q, --quiet         Surpress all output
EOF
)

  console info "${help}\n" && exit 0
}

#
# Execute a command in the docker container
#
docker_exec() {
    execute docker exec "${@}"
}

#
# Send a JSON-RPC command to the bitcoin service
#
rpc() {
    docker_exec bitcoin bash -c "bitcoin-cli -conf=/etc/bitcoin.conf -datadir=/var/lib/bitcoind ${@}"
}

#
# Parse command options
#
case $1 in
  -q|--quiet)
    QUIET=true
    shift
    ;;
esac

#
# Parse commands and arguments
#
case $1 in
    rpc)
        shift
        rpc "${@:---help}"
        ;;
    exec)
        CONTAINER=$2
        shift 2

        docker_exec $CONTAINER "${@}"
        ;;
    *|-h|--help)
        help
        ;;
esac

exit 0